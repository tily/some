#!/usr/bin/env ruby
$:.unshift File.dirname(__FILE__) + '/../lib' unless $:.include? File.dirname(__FILE__) + '/../lib'

require 'rubygems'
require 'some'
require 'thor'

class CLI < Thor
	desc "launch [<role>]", "launch an instance as role, or omit to ssh to vanilla instance"
	option :name, :type => :string, :aliases => '-n', :desc => 'instance name'
	option :skip, :aliases => '-s', :desc => 'skip ssh login'
	option :image_id, :aliases => '-i', :desc => 'image id'
	def launch(role=nil)
		id = task("Launch instance") { some.launch(options[:name], :image_id => options[:image_id]) }
		host = task("Acquire hostname") { some.wait_for_hostname(id) }
		task("Wait for ssh") { some.wait_for_ssh(host) }

		if role
			task("Bootstrap chef") { some.bootstrap_chef(host) }
			task("Setup #{role}") { some.setup_role(host, role, id) }
                else
			unless options[:skip]
				puts "\nLogging you in via ssh.  Type 'exit' or Ctrl-D to return to your local system."
				puts '-' * 78
				connect_ssh(host)
			end
		end
	end

	desc "ssh [<instance_id or hostname>]", "ssh to a specified instance or first available"
	def ssh(id=nil)
		inst = some.find(id) || some.running.first || abort("No running instances")
		hostname = inst[:hostname] || wait_for_hostname(inst[:instance_id])
		connect_ssh hostname
	end

	desc "bootstrap", "bootstrap chef and cookbooks"
	def bootstrap(id=nil)
		inst = some.find(id) || some.running.first || abort("No running instances")
		task "Bootstrap chef" do
			some.bootstrap_chef(inst[:hostname])
		end
	end

	desc "role", "setup instance as a role"
	def role(role, id=nil)
		inst = some.find(id) || some.running.first || abort("No running instances")
		task "Setup #{role}" do
			some.setup_role(inst[:hostname], role, inst[:instance_id])
		end
	end

	desc "list", "list running instances"
	option :format, :type => :string, :aliases => '-f', :desc => 'format (capfile)'
	def list
		if options[:format] == 'capfile'
			puts some.capfile
		else
			some.list.each do |inst|
				printf "%-15s %-15s %s\n", inst[:hostname], inst[:instance_id], inst[:status]
			end
		end
	end

	desc "terminate [<instance_id or hostname>]", "terminate specified instance or first available"
	def terminate(id=nil)
		inst = some.find(id) || (some.running | some.pending).first || abort("No running or pending instances")
		if inst[:status] != 'stopped'
			task('Stop Instance') { some.stop(inst[:instance_id]); "done" }
			task('Wait to stop') { some.wait_to_stop(inst[:instance_id]) }
		end
		some.terminate(inst[:instance_id])
		some.wait_to_terminate(inst[:instance_id])
		puts "#{inst[:hostname] || inst[:instance_id]} scheduled for termination"
	end

	desc "openfw <port>", "open firewall"
	def openfw(port)
		raise ArgumentError unless port
		some.open_firewall(port)
		puts "port #{port} scheduled for open"
	end

	desc "closefw <port>", "close firewall"
	def closefw(port)
		raise ArgumentError unless port
		some.close_firewall(port)
		puts "port #{port} scheduled for close"
	end

	desc "fwlist", "list firewall rules"
	def fwlist
		some.firewall_list.each do |fw|
			printf "%5s %5s %3s     %s\n", fw[:ip_protocol], fw[:from_port], fw[:in_out], (fw[:group] || fw[:cidr])
		end
	end

	desc "reset", "delete all the resources created by some (instances, security group, key pair)"
	def reset
		some.list.each do |inst|
			terminate(inst[:instance_id])
		end
		task("Delete security group") { some.delete_security_group }
		task("Delete key pair") { some.delete_keypair }
	end

	desc "images", "list images"
	def images
		some.images.each do |img|
			printf "%-5s %s %s\n", img[:image_id], img[:availability_zone], img[:name]
		end
	end

	desc "cap", "call capistrano"
	def cap(*args)
		File.open(ENV['HOME'] + '/.some/Capfile', 'w') do |f|
			f.write some.capfile
		end
		system "cap -f ~/.some/Capfile #{args.join(' ')}"
	end

	desc "cache", "cache instance list"
	def cache(*args)
		some.cache_list
	end

	desc "sync", "sync nodes"
	def sync
		some.sync
	end

	desc "batch 'command1, command2'", "batch execute"
	def batch(arg)
		commands = arg.split(";")
		commands.each do |x|
			system("some #{x}")
		end
	end

	desc "volumes", "list all volumes"
	def volumes
		some.volumes.each do |v|
			printf "%-10s %4sGB %10s %15s %15s\n", v[:volume_id], v[:size], v[:status], v[:instance], v[:device]
		end
	end
	desc "start [<instance_id or hostname>]", "start specified instance or first available"
	option :wait, :aliases => '-w', :desc => 'wait to start'
	def start(id=nil)
		inst = some.find(id) || (some.stopped).first || abort("No stopped instances")
		task('Start instance') { some.start(inst[:instance_id]); "done" }
		task('Wait to start') { some.wait_for_hostname(inst[:instance_id]) } if options[:wait]
	end

	desc "stop [<instance_id or hostname>]", "stop specified instance or first available"
	option :wait, :aliases => '-w', :desc => 'wait to stop'
	def stop(id=nil)
		inst = some.find(id) || (some.running | some.pending).first || abort("No running or pending instances")
		task('Stop Instance') { some.stop(inst[:instance_id]); "done" }
		task('Wait to stop') { some.wait_to_stop(inst[:instance_id]) } if options[:wait]
	end


	desc "create_volume [<instance_id or hostname>]", "create a volume"
	option :name, :type => :string, :aliases => '-n', :desc => 'volume name'
	def create_volume(id=nil)
		inst = some.find(id) || (some.running | some.pending).first || abort("No running or pending instances")

		orig_status = inst[:status]
		if inst[:status] == 'running'
			task('Stop Instance') { some.stop(inst[:instance_id]); "done" }
			task("Wait to stop") { some.wait_to_stop(inst[:instance_id]) }
		end

		task("Create 100GB volume") { some.create_volume(options[:name], inst[:instance_id]) }

		some.reload
		inst = some.find(inst[:instance_id])
		if inst[:status] == 'stopped' && orig_status == 'running'
			task('Start instance') { some.start(inst[:instance_id]); "done" }
			task("Wait to start") { some.wait_for_hostname(inst[:instance_id]) }
		end
	end

	desc "destroy_volume [<volume_id>]", "destroy a volume"
	def destroy_volume(volume=nil)
		vol_id = (some.find_volume(volume) || some.nondestroyed_volumes.first || abort("No volumes"))[:volume_id]
		task("Destroy volume") { some.destroy_volume(vol_id) }
	end

	desc "attach [<volume_id>] [<instance_id or hostname>] [<device>]", "attach volume to running instance"
	def attach(volume=nil, inst_id=nil, device=nil)
		vol_id = (some.find_volume(volume) || some.available_volumes.first || abort("No available volumes"))[:volume_id]
		inst = (some.find(inst_id) || some.running.first || abort("No running instances"))

		orig_status = inst[:status]
		if inst[:status] == 'running'
			task('Stop Instance') { some.stop(inst[:instance_id]); "done" }
			task("Wait to stop") { some.wait_to_stop(inst[:instance_id]) }
		end

		device ||= '/dev/sdb'
		task("Attach #{vol_id} to #{inst_id} as #{device}") do
			some.attach(vol_id, inst[:instance_id], device)
		end

		some.reload
		inst = some.find(inst[:instance_id])
		if inst[:status] == 'stopped' && orig_status == 'running'
			task('Start instance') { some.start(inst[:instance_id]); "done" }
			task("Wait to start") { some.wait_for_hostname(inst[:instance_id]) }
		end
	end

	desc "detach [<volume_id>]", "detach volume from instance"
	def detach(volume=nil)
		volume = (some.find_volume(volume) || some.attached_volumes.first || abort("No attached volumes"))
		vol_id = volume[:volume_id]
		inst = some.find(volume[:instance_id])

		orig_status = inst[:status]
		if inst[:status] == 'running'
			task('Stop Instance') { some.stop(inst[:instance_id]); "done" }
			task("Wait to stop") { some.wait_to_stop(inst[:instance_id]) }
		end

		task("Detach #{vol_id}") { some.detach(vol_id) }

		some.reload
		inst = some.find(inst[:instance_id])
		if inst[:status] == 'stopped' && orig_status == 'running'
			task("Wait to start") do
				some.start(inst[:instance_id])
				some.wait_for_hostname(inst[:instance_id])
			end
		end
	end

	desc "ip <instance_id>", "print instance ip address"
	def ip(inst_id)
		inst = some.find(inst_id)
		raise ArgumentError if inst.nil?
		print inst[:public_ip]
	end

	no_tasks do
		def some
			@some ||= Some.new
		end

		def config
			some.config
		end

		def task(msg, &block)
			printf "---> %-24s ", "#{msg}..."
			start = Time.now
			result = block.call || 'done'
			finish = Time.now
			time = sprintf("%0.1f", finish - start)
			puts "#{result} (#{time}s)"
			result
		end

		def connect_ssh(hostname)
			some.wait_for_ssh(hostname)
			system "ssh -i #{some.keypair_file} #{config['user']}@#{hostname}"
			if $?.success?
				puts "\nType 'some terminate' if you're done with this instance."
			end
		end
	end
end

CLI.start
